# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
name: Java CI with Maven

on:
  push:
    branches: [ "master", "develop" ]
  pull_request:
    branches: [ "master" ]
  #schedule:
  #   - cron: "*/10 * * * *"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Code Checkout
      uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    - name: Build with Maven
      run: mvn -B package --file pom.xml
    - uses: actions/upload-artifact@v3
      with:
       name: buildArtifact
       path: target/*.war
    - name: Storing manifests in GitHub
      uses: actions/upload-artifact@v3
      with:
       name: k8smanifestsArtifacts
       path: k8smanifest/*
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    - name: Build and push
      uses: docker/build-push-action@v5
      with:
        push: true
        context: .
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/planview:latest 
        
  deploy: 
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Downloading manifests from GitHub
      uses: actions/download-artifact@v3
      with:
       name: k8smanifestsArtifacts

    - name: Deploy Application using SSH
      uses: cross-the-world/ssh-scp-ssh-pipelines@latest
      env:
       WELCOME: "ssh scp ssh pipelines"
       LASTSSH: "Doing something after copying"
      with:
       host: ${{ secrets.DC_HOST }}
       user: ${{ secrets.DC_USER }}
       pass: ${{ secrets.DC_PASS }}
       port: ${{ secrets.DC_PORT }}
       connect_timeout: 10s
       first_ssh: |
        rm -rf /tmp/Docker
        mkdir -p /tmp/Docker
       scp: |
        '*.yaml' => /tmp/Docker/
       last_ssh: |
        cd /tmp/Docker/
        kubectl apply -f .
        
       #host: ${{ secrets.DC_HOST }}
       #user: ${{ secrets.DC_USER }}
       #pass: ${{ secrets.DC_PASS }}
       #port: ${{ secrets.DC_PORT }}
